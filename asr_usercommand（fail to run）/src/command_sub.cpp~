#include "ros/ros.h"
#include "std_msgs/String.h"
#include "asr_usercommand/Command.h"
#include "asr_usercommand/UserCommand.h"
#ifdef __cplusplus
 #if __cplusplus
 extern "C"{
　 #endif
#endif /* __cplusplus */ 
#include "/home/turtlebot2/asr_ws/devel/include/asr_usercommand/stdio.h"
#include "/home/turtlebot2/asr_ws/devel/include/asr_usercommand/string.h"
#include "/home/turtlebot2/asr_ws/devel/include/asr_usercommand/stdlib.h"
#include "/home/turtlebot2/asr_ws/devel/include/asr_usercommand/unistd.h"

#include "/home/turtlebot2/asr_ws/devel/include/asr_usercommand/qtts.h"
#include "/home/turtlebot2/asr_ws/devel/include/asr_usercommand/msp_cmn.h"
#include "/home/turtlebot2/asr_ws/devel/include/asr_usercommand/msp_errors.h"
#ifdef __cplusplus
          #if __cplusplus
 }
 #endif
#endif /* __cplusplus */ 

//#include "/home/turtlebot2/asr_ws/devel/include/asr_usercommand/msp_types.h"

typedef int SR_DWORD;
typedef short int SR_WORD ;

//音频头部格式
struct wave_pcm_hdr
{
	char            riff[4];                        // = "RIFF"
	SR_DWORD        size_8;                         // = FileSize - 8
	char            wave[4];                        // = "WAVE"
	char            fmt[4];                         // = "fmt "
	SR_DWORD        dwFmtSize;                      // = 下一个结构体的大小 : 16

	SR_WORD         format_tag;              // = PCM : 1
	SR_WORD         channels;                       // = 通道数 : 1
	SR_DWORD        samples_per_sec;        // = 采样率 : 8000 | 6000 | 11025 | 16000
	SR_DWORD        avg_bytes_per_sec;      // = 每秒字节数 : dwSamplesPerSec * wBitsPerSample / 8
	SR_WORD         block_align;            // = 每采样点字节数 : wBitsPerSample / 8
	SR_WORD         bits_per_sample;         // = 量化比特数: 8 | 16

	char            data[4];                        // = "data";
	SR_DWORD        data_size;                // = 纯数据长度 : FileSize - 44 
} ;

//默认音频头部数据
struct wave_pcm_hdr default_pcmwavhdr = 
{
	{ 'R', 'I', 'F', 'F' },
	0,
	{'W', 'A', 'V', 'E'},
	{'f', 'm', 't', ' '},
	16,
	1,
	1,
	16000,
	32000,
	2,
	16,
	{'d', 'a', 't', 'a'},
	0  
};


int text_to_speech(const char* src_text ,const char* des_path ,const char* params)
{
	struct wave_pcm_hdr pcmwavhdr = default_pcmwavhdr;
	const char* sess_id = NULL;
	int ret = 0;
	unsigned int text_len = 0;
	char* audio_data;
	unsigned int audio_len = 0;
	int synth_status = 1;
	FILE* fp = NULL;

	printf("\nbegin to synth...\n");
	if (NULL == src_text || NULL == des_path)
	{
		printf("params is null!\n");
		return -1;
	}
	text_len = (unsigned int)strlen(src_text);
	fp = fopen(des_path,"wb");
	if (NULL == fp)
	{
		printf("open file %s error\n",des_path);
		return -1;
	}
	sess_id = QTTSSessionBegin(params, &ret);
	if ( ret != MSP_SUCCESS )
	{
		printf("QTTSSessionBegin: qtts begin session failed Error code %d.\n",ret);
		return ret;
	}

	ret = QTTSTextPut(sess_id, src_text, text_len, NULL );
	if ( ret != MSP_SUCCESS )
	{
		printf("QTTSTextPut: qtts put text failed Error code %d.\n",ret);
		QTTSSessionEnd(sess_id, "TextPutError");
		return ret;
	}
	fwrite(&pcmwavhdr, sizeof(pcmwavhdr) ,1, fp);
	while (1) 
	{
		const void *data = QTTSAudioGet(sess_id, &audio_len, &synth_status, &ret);
		if (NULL != data)
		{
		   fwrite(data, audio_len, 1, fp);
		   pcmwavhdr.data_size += audio_len;//修正pcm数据的大小
		}
              printf("\nget audio...\n");
              usleep(150000);//建议可以sleep下，因为只有云端有音频合成数据，audioget都能获取到音频。
		if (synth_status == 2 || ret != 0) 
		break;
	}

	//修正pcm文件头数据的大小
	pcmwavhdr.size_8 += pcmwavhdr.data_size + 36;

	//将修正过的数据写回文件头部
	fseek(fp, 4, 0);
	fwrite(&pcmwavhdr.size_8,sizeof(pcmwavhdr.size_8), 1, fp);
	fseek(fp, 40, 0);
	fwrite(&pcmwavhdr.data_size,sizeof(pcmwavhdr.data_size), 1, fp);
	fclose(fp);

	ret = QTTSSessionEnd(sess_id, NULL);
	if ( ret != MSP_SUCCESS )
	{
	printf("QTTSSessionEnd: qtts end failed Error code %d.\n",ret);
	}
       printf("\nTTS end...\n");
	return ret;
}

void commandCallback(asr_usercommand::Command  msg)
{
  printf("I heard: %s\n", msg.command.c_str());
  char text[50]="收到指令!";
  strcat(text,msg.command.c_str()); 
  
  const char* login_configs = " appid = 55b1aeb0, work_dir =   .  ";
  const char*  filename = "/home/turtlebot2/asr_ws/src/asr_usercommand/wav/text_to_speech.wav";
  const char* param = "vcn=xiaoyan,aue = speex-wb,auf=audio/L16;rate=16000,spd = 5,vol = 5,tte = utf8";//8k音频合成参数：aue=speex,auf=audio/L16;rate=8000,其他参数意义参考参数列表
  int ret = 0;
  char key = 0;
  //用户登录
  ret = MSPLogin(NULL, NULL, login_configs);
  if ( ret != MSP_SUCCESS )
  {
	printf("MSPLogin failed , Error code %d.\n",ret);
  }
  //音频合成
  ret = text_to_speech(text,filename,param);
  if ( ret != MSP_SUCCESS )
  {
	printf("text_to_speech: failed , Error code %d.\n",ret);
  }
  //退出登录
  MSPLogout();
}

int main(int argc, char **argv)
{
 
  ros::init(argc, argv, "command_subscriber");

  ros::NodeHandle n;

  ros::Subscriber command_sub = n.subscribe("command", 1000, commandCallback);
  ros::spin();

  return 0;
}
